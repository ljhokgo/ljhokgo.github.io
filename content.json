{"pages":[],"posts":[{"title":"nodejs 버전 관리도구 nvm","text":"nodejs로 개발을 하다보면 다양한 node 또는 npm 버전을 사용해야 할 때가 있습니다.사실 저 같은 경우 이럴 때 마다 필요한 버전의 node나 npm을 새로 설치했는데..얼마전 알게된 nvm이라는 툴로 너무나 간단하게 이 문제가 해결되어 nvm 사용법을 간단하게나마 공유합니다. nvm은 Node Version Manager의 약자로 이름에서 알 수 있다시피 nodejs의 버전을 관리해주는 툴입니다.계정(user) 별로 설치되며, shell 별로 버전을 설정할 수 있고 간단한 명령어로 버전을 변경할 수 있습니다. 설치nvm 설치는 script를 통해 가능합니다. (아래 두 명령어 중 하나만 사용하시면 됩니다.) 1curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash 1wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash 설치 후에는 아래와 같은 nvm 관련 설정이 설정파일(~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc)에 추가됩니다. 12export NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] &amp;&amp; printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" # This loads nvm 사용node 목록 조회 설치 가능한 전체 목록 조회 1nvm ls-remote # or list-remote 설치된 목록 조회 1nvm ls # or list node 설치 및 삭제 최신 버전 설치 1nvm install node # \"node\" is an alias for the latest version 특정 버전 설치(만약 숫자 하나만 입력 시 해당 버전의 최신 버전을 설치, 예: nvm install 8 &rarr; 8.x.x 중 최신 버전 설치) 1nvm install 6.14.4 # or 10.10.0, 8.9.1, etc 특정 버전 삭제 1nvm uninstall 6.14.4 # or 10.10.0, 8.9.1, etc node 버전 변경 버전 명시(숫자 하나만 입력해도 가능, 예: nvm use 8 &rarr; 설치된 8.x.x 버전 사용) 1nvm use 6.14.4 # or 10.10.0, 8.9.1, etc 별명 명시 1nvm use default 별명 부여기억/사용하기 쉽게 node 특정 버전에 별명을 부여해 관리 가능 1nvm alias &lt;name&gt; &lt;version&gt; 예를 들어 nvm alias test 8.9.4 입력 시 아래와 같이 이름이 부여되며, nvm use test 명령어로 node v8.9.4를 사용 가능합니다.","link":"/2020/06/25/nodejs-nvm/"},{"title":"TDD (Test Driven Development)","text":"개발 시 테스트가 중요하다는 것은 많이 들었지만.. 생각만 하고 정작 실천은 하지 못했던 것 같다.그러던 와중 TDD에 대해 공부할 수 있는 좋은 기회가 생겼고, 관련 내용을 간단하게라도 정리해보려 한다. TDD?TDD(Test Driven Development, 테스트 주도 개발)란 소프트웨어 개발 방법론 중 하나로 테스트를 먼저 작성하고(Test First Development),지속적으로 리팩토링(Refactoring)하는 기법이다. TDD = Test First Development + Refactoring TDD가 일반적인 소프트웨어 개발 과정과 가장 다른 점은 테스트 코드 작성 시점이라 생각한다.설계 &gt; 개발 &gt; 테스트 순으로 진행되는 일반적인 개발 과정과 달리 TDD는 설계 후 테스트 코드를 작성한다. 사실 위 설명만 봐서는 무슨 의미인지 잘 와닿지 않을 수 있는데..조금이라도 도움이 될까 하여 개인적으로 개발하는 과정을 남겨본다. 요구사항(기능) 정의 우선순위 결정 및 대략적인 설계 포함 기능에 대한 단위 테스트 코드 작성 에러가 없이(빨간줄 없이) 빌드 가능하도록 최소한의 프로덕션 코드 작성 (예: 테스트 코드에서 int를 받아오는 기능이 있을 경우 프로덕션 코드에서는 로직 없이 return 0) 테스트를 통과할 수 있는 프로덕션 코드 작성 리팩토링 기능이 완성될 때 까지 3~4 반복 기능이 완성되면 2부터.. 기대효과 기능 구현에 집중 테스트 코드를 먼저 작성하다보니 구현하고자 하는 기능의 완성 형태에 대해 고민하게 되고 의도를 명확하게 정의 가능 프로덕션 코드 작성 시 기능의 의도에 집중해 구현 가능 유지보수 용이 모든 기능에 대해 단위 테스트가 작성되어 있다보니 리팩토링 시 불안하지 않아도 됨 코드를 수정하거나 새로운 기능 추가 시 원하는 부분에만 집중 가능 문서화 대체 가능 문서화가 필요 없다는 말은 아님 별도의 문서화를 하지 않아도 테스트 코드를 통해 코드 파악 쉽게 가능","link":"/2020/06/22/TDD/"}],"tags":[{"name":"nodejs","slug":"nodejs","link":"/tags/nodejs/"},{"name":"tools","slug":"tools","link":"/tags/tools/"}],"categories":[{"name":"nodejs","slug":"nodejs","link":"/categories/nodejs/"},{"name":"Development","slug":"Development","link":"/categories/Development/"}]}